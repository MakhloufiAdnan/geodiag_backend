import Joi from 'joi';
import logger from '../config/logger.js';

/**
 * @file Valide les variables d'environnement critiques au d√©marrage de l'application.
 * @description Utilise une approche "fail-fast" : si une variable essentielle est manquante
 * ou a un format incorrect, le processus est arr√™t√© avec un message d'erreur explicite.
 */

/**
 * Valide l'objet `process.env` contre un sch√©ma Joi pr√©d√©fini et strict.
 * @throws {Error} Lance une erreur et arr√™te l'application si la validation √©choue.
 */
export const validateEnv = () => {
  const schema = Joi.object({
    // --- Configuration G√©n√©rale ---
    NODE_ENV: Joi.string()
      .valid('development', 'production', 'test')
      .required(),
    PORT: Joi.number().port().required(), // Valide que c'est un port r√©seau valide (0-65535)

    // --- Connexions Externes ---
    DATABASE_URL: Joi.string().uri().required(), // Valide que c'est une URI (ex: postgresql://...)
    REDIS_URL: Joi.string().uri().required(), // Valide que c'est une URI (ex: redis://...)

    // --- Secrets d'Authentification (avec contraintes de s√©curit√©) ---
    JWT_ACCESS_SECRET: Joi.string().min(32).required(), // Exige une longueur minimale pour la s√©curit√©
    JWT_REFRESH_SECRET: Joi.string().min(32).required(), // Exige une longueur minimale pour la s√©curit√©

    // --- Dur√©es d'Expiration des Jetons ---
    JWT_EXPIRATION: Joi.string().required(),
    JWT_REFRESH_EXPIRATION: Joi.string().required(),

    // --- Secrets des Services Tiers (avec format sp√©cifique) ---
    STRIPE_SECRET_KEY: Joi.string()
      .pattern(/^sk_(test|live)_/)
      .required(), // Valide le pr√©fixe des cl√©s secr√®tes Stripe
    STRIPE_WEBHOOK_SECRET: Joi.string()
      .pattern(/^whsec_/)
      .required(), // Valide le pr√©fixe des secrets de webhook Stripe

    // --- URLs ---
    FRONTEND_URL: Joi.string().uri().required(),
  }).unknown(); // .unknown() autorise les autres variables d'environnement non list√©es ici

  const { error } = schema.validate(process.env);

  if (error) {
    // Si une erreur est trouv√©e, on logue le d√©tail et on arr√™te tout.
    logger.fatal(
      `üî• Erreur de validation de la configuration: ${error.message}`
    );
    process.exit(1);
  } else {
    // Message de succ√®s pour confirmer que tout est en ordre au d√©marrage.
    logger.info("‚úÖ Configuration de l'environnement valid√©e.");
  }
};

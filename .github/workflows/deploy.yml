name: CI & Deploy

on:
  push:
    branches: ['main']
    tags:
      - 'v*'
  pull_request:
    branches: ['main']

# Si un nouveau déploiement est lancé pour le même tag/branche, l'ancien est annulé.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # ===============================================
  # ==           TESTER L'APPLICATION            ==
  # ===============================================
  test:
    name: Run Tests
    environment: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: geodiag
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: geodiag_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Lint Code
        run: npm run lint

      - name: Scan for Vulnerabilities
        run: npm audit --audit-level=high

      - name: Wait for PostgreSQL Service to be Ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U geodiag; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up and running!"
        env:
          PGUSER: geodiag
          PGPASSWORD: ${{ secrets.TEST_DB_PASSWORD }}

      - name: Wait for Redis Service to be Ready
        run: |
          echo "Waiting for Redis to be ready..."
          until nc -z localhost 6379; do
            echo "Redis is unavailable - sleeping"
            sleep 1
          done
          echo "Redis is up and running!"

      - name: Run Tests
        run: npm test
        env:
          DATABASE_URL: postgresql://geodiag:${{ secrets.TEST_DB_PASSWORD }}@localhost:5432/geodiag_test
          REDIS_URL: redis://localhost:6379
          JWT_ACCESS_SECRET: ${{ secrets.TEST_JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.TEST_JWT_REFRESH_SECRET }}
          JWT_EXPIRATION: ${{ secrets.TEST_JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.TEST_JWT_REFRESH_EXPIRATION }}
          STRIPE_SECRET_KEY: ${{ secrets.TEST_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.TEST_STRIPE_WEBHOOK_SECRET }}
          PAYMENT_SUCCESS_URL: ${{ secrets.TEST_PAYMENT_SUCCESS_URL }}
          PAYMENT_CANCEL_URL: ${{ secrets.TEST_PAYMENT_CANCEL_URL }}
          EMAIL_HOST: 'smtp.example.com'
          PORT: '587'
          USER: 'test@example.com'
          PASS: 'testpassword'
          FRONTEND_URL: 'http://localhost:5173'
          
  # ===============================================
  # ==         DÉPLOYER EN PRODUCTION            ==
  # ===============================================
  deploy:
    name: Deploy to Production
    needs: test
    if: github.event_name == 'push' && github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    environment: Product
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Production Dependencies
        run: npm ci --omit=dev

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

      - name: Apply DB Migrations via SSH Tunnel
        run: |
          echo "Setting up SSH tunnel..."
          # Ajoute l'hôte Alwaysdata aux hôtes connus pour éviter l'invite interactive
          ssh-keyscan ${{ secrets.PROD_SSH_HOST }} >> ~/.ssh/known_hosts
          
          # Ouvre le tunnel en arrière-plan. 
          ssh -N -L 5433:postgresql-assistantsinistregeodiag.alwaysdata.net:5432 ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_SSH_HOST }} &
          
          # Laisse le temps au tunnel de s'établir
          sleep 5
          echo "Tunnel established. Running migrations..."
          
          npm run migrate up
        env:
          PGHOST: 127.0.0.1
          PGPORT: 5433
          PGUSER: ${{ secrets.PROD_DB_USER }}
          PGPASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          PGDATABASE: ${{ secrets.PROD_DB_DATABASE }}
          PGSSLMODE: require
          # Set NODE_TLS_REJECT_UNAUTHORIZED to 0 à revoir pour la sécurité (provisoire)
          NODE_TLS_REJECT_UNAUTHORIZED: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Fly.io Docker Registry
        uses: docker/login-action@v3
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: registry.fly.io/${{ vars.FLY_APP_NAME }}:${{ github.ref_name }}
          cache-from: type=registry,ref=registry.fly.io/${{ vars.FLY_APP_NAME }}:buildcache
          cache-to: type=registry,ref=registry.fly.io/${{ vars.FLY_APP_NAME }}:buildcache,mode=max

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master
        
      - name: Deploy Application to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          IMAGE_TAG=${{ github.ref_name }}
          fly deploy --remote-only --app ${{ vars.FLY_APP_NAME }} --image registry.fly.io/${{ vars.FLY_APP_NAME }}:$IMAGE_TAG --force-instance-refresh

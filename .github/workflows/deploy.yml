name: CI & Deploy
on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  ## Test Application
  # ===============================================
  # ==          JOB 1: TESTER L'APPLICATION      ==
  # ===============================================
  test:
    name: Test Application
    environment: Test 
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: geodiag
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: geodiag_test
        ports:
          - 5432:5432 
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint 

      - name: Scan for vulnerabilities
        run: npm audit --audit-level=high

      - name: Wait for PostgreSQL Service to be Ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          until pg_isready -h localhost -p 5432 -U geodiag; do
            echo "PostgreSQL is unavailable - sleeping"
            sleep 1
          done
          echo "PostgreSQL is up and running!"
        env:
          PGUSER: geodiag
          PGPASSWORD: ${{ secrets.TEST_DB_PASSWORD }}

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://geodiag:${{ secrets.TEST_DB_PASSWORD }}@localhost:5432/geodiag_test
          JWT_ACCESS_SECRET: ${{ secrets.TEST_JWT_ACCESS_SECRET }}
          # Si tes tests nécessitent Redis, assure-toi de configurer un service Redis similaire
          # ou d'utiliser un mock/stub. Ex: REDIS_URL: ${{ secrets.TEST_REDIS_URL }}

  ## Deploy to Production
  # ===============================================
  # ==          JOB 2: DÉPLOYER EN PRODUCTION    ==
  # ===============================================
  deploy:
    name: Deploy to Production
    needs: test 
    if: github.event_name == 'push' && github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    environment: Product
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install production dependencies
        run: npm ci --omit=dev

      - name: Log in to Fly.io Docker Registry
        # Authentifie Docker avec le registre Fly.io pour pousser l'image
        uses: docker/login-action@v3
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }} 

      - name: Build and Push Docker Image
        id: build_push_image
        run: |
          # Extrait le nom de l'application directement depuis le fichier fly.toml
          # Assurez-vous que le fichier fly.toml est à la racine du dépôt.
          APP_NAME=$(grep '^app =' fly.toml | cut -d "'" -f 2 | cut -d '"' -f 2)
          # Utilise le nom du tag Git (ex: v1.0.0) comme tag de l'image Docker pour un versioning clair
          IMAGE_TAG=${{ github.ref_name }}
          
          echo "Building Docker image: registry.fly.io/$APP_NAME:$IMAGE_TAG"
          docker build . --file ./Dockerfile --tag registry.fly.io/$APP_NAME:$IMAGE_TAG
          
          echo "Pushing Docker image: registry.fly.io/$APP_NAME:$IMAGE_TAG"
          docker push registry.fly.io/$APP_NAME:$IMAGE_TAG

      - name: Apply DB Migrations to Production Database (Alwaysdata)
        run: npm run migrate up
        env:
          PGHOST: ${{ secrets.PROD_DB_HOST }}
          PGPORT: ${{ secrets.PROD_DB_PORT }}
          PGUSER: ${{ secrets.PROD_DB_USER }}
          PGPASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          PGDATABASE: ${{ secrets.PROD_DB_DATABASE }}
          PGSSLMODE: require 

      - name: Install Flyctl
        uses: superfly/flyctl-actions/setup-flyctl@master

      - name: Deploy Application to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }} 
        run: |
          # Extrait le nom de l'application directement depuis le fichier fly.toml
          APP_NAME=$(grep '^app =' fly.toml | cut -d "'" -f 2 | cut -d '"' -f 2)
          IMAGE_TAG=${{ github.ref_name }}
          
          echo "Deploying application $APP_NAME with image registry.fly.io/$APP_NAME:$IMAGE_TAG"
          # Déploie l'application sur Fly.io en utilisant l'image Docker déjà poussée.
          fly deploy --remote-only --app $APP_NAME --image registry.fly.io/$APP_NAME:$IMAGE_TAG --force-instance-refresh
          
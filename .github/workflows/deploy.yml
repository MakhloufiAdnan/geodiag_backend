name: CI & Deploy

on:
  push:
    branches: ['main']
    tags:
      - 'v*'
  pull_request:
    branches: ['main']

# Si un nouveau déploiement est lancé pour le même tag/branche, l'ancien est annulé.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  # ===============================================
  # ==           TESTER L'APPLICATION            ==
  # ===============================================
  test:
    name: Run Tests
    environment: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: geodiag
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: geodiag_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Lint Code
        run: npm run lint

      - name: Scan for Vulnerabilities
        run: npm audit --audit-level=critical
      - name: Run Tests
        run: npm test
        env:
          DATABASE_URL: postgresql://geodiag:${{ secrets.TEST_DB_PASSWORD }}@localhost:5432/geodiag_test
          REDIS_URL: redis://localhost:6379
          JWT_ACCESS_SECRET: ${{ secrets.TEST_JWT_ACCESS_SECRET }}
          JWT_REFRESH_SECRET: ${{ secrets.TEST_JWT_REFRESH_SECRET }}
          JWT_EXPIRATION: ${{ secrets.TEST_JWT_EXPIRATION }}
          JWT_REFRESH_EXPIRATION: ${{ secrets.TEST_JWT_REFRESH_EXPIRATION }}
          STRIPE_SECRET_KEY: ${{ secrets.TEST_STRIPE_SECRET_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.TEST_STRIPE_WEBHOOK_SECRET }}
          PAYMENT_SUCCESS_URL: ${{ secrets.TEST_PAYMENT_SUCCESS_URL }}
          PAYMENT_CANCEL_URL: ${{ secrets.TEST_PAYMENT_CANCEL_URL }}
          EMAIL_HOST: 'smtp.example.com'
          PORT: '587'
          USER: 'test@example.com'
          PASS: 'testpassword'
          FRONTEND_URL: 'http://localhost:5173'

  # ===============================================
  # ==         DÉPLOYER EN PRODUCTION            ==
  # ===============================================
  deploy:
    name: Deploy to Production
    needs: test
    if: github.event_name == 'push' && github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    environment: Product
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Fly.io Docker Registry
        uses: docker/login-action@v3
        with:
          registry: registry.fly.io
          username: x
          password: ${{ secrets.FLY_API_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: registry.fly.io/${{ vars.FLY_APP_NAME }}:${{ github.ref_name }}
          cache-from: type=registry,ref=registry.fly.io/${{ vars.FLY_APP_NAME }}:buildcache
          cache-to: type=registry,ref=registry.fly.io/${{ vars.FLY_APP_NAME }}:buildcache,mode=max

      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          # Step 1: Install flyctl
          curl -L https://fly.io/install.sh | sh
          export FLYCTL_INSTALL="/home/runner/.fly"
          export PATH="$FLYCTL_INSTALL/bin:$PATH"

          # Déploiement de la nouvelle image
          fly deploy --remote-only --app ${{ vars.FLY_APP_NAME }} --image registry.fly.io/${{ vars.FLY_APP_NAME }}:${{ github.ref_name }}

name: CI & Deploy
on:
  push:
    branches: [ "main" ]
    tags:
      - 'v*'
  pull_request:
    branches: [ "main" ]

jobs:
  # ===============================================
  # ==       JOB 1: TESTER L'APPLICATION         ==
  # ===============================================
  test:
    name: Test Application
    environment: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: geodiag
          POSTGRES_PASSWORD: ${{ secrets.TEST_DB_PASSWORD }}
          POSTGRES_DB: geodiag_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint code
        run: npm run lint

      - name: Scan for vulnerabilities
        run: npm audit --audit-level=high

      - name: Apply DB migrations to test database
        run: npm run migrate up
        env:
          DATABASE_URL: postgresql://geodiag:${{ secrets.TEST_DB_PASSWORD }}@localhost:5432/geodiag_test

      - name: Run tests
        run: npm test
        env:
          DATABASE_URL: postgresql://geodiag:${{ secrets.TEST_DB_PASSWORD }}@localhost:5432/geodiag_test
          JWT_ACCESS_SECRET: ${{ secrets.TEST_JWT_ACCESS_SECRET }}

  # ===============================================
  # ==       JOB 2: DÃ‰PLOYER EN PRODUCTION       ==
  # ===============================================
  deploy:
    name: Deploy to Production
    needs: test
    if: github.ref_type == 'tag' && startsWith(github.ref_name, 'v')
    environment: Product
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install production dependencies
        ### RECOMMANDATION : Omettre les devDependencies en production.
        run: npm ci --omit=dev

      - name: Apply DB migrations to production database
        run: npm run migrate up
        env:
          PGHOST: ${{ secrets.PROD_DB_HOST }}
          PGPORT: ${{ secrets.PROD_DB_PORT }}
          PGUSER: ${{ secrets.PROD_DB_USER }}
          PGPASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          PGDATABASE: ${{ secrets.PROD_DB_DATABASE }}
          PGSSLMODE: require
      
      - name: Deploy application to Render
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}